networks:
  nodesmetadata:
    driver: "bridge"
  node:
    driver: "bridge"
services:
  node0:
    container_name: node0
    tty: true
    build:
      context: ..
      dockerfile: node/Dockerfile
    networks:
      - node
    ports:
      - "30000:8080"
    command: [
      "/app/node",
      "--cache_size", "10",
    ]
  node1:
    container_name: node1
    tty: true
    build:
      context: ..
      dockerfile: node/Dockerfile
    networks:
      - node
    ports:
      - "30001:8080"
    command: [
      "/app/node",
      "--cache_size", "10",
    ]
  node2:
    container_name: node2
    tty: true
    build:
      context: ..
      dockerfile: node/Dockerfile
    networks:
      - node
    ports:
      - "30002:8080"
    command: [
      "/app/node",
      "--cache_size", "10",
    ]
  nodesmetadata0: # first leader
    container_name: nodesmetadata0
    tty: true
    build:
      context: ..
      dockerfile: nodesmetadata/Dockerfile
    networks:
      - nodesmetadata
    ports:
      - "31000:8080"
    command: [
      "/app/nodesmetadata",
      "--raft_id", "raft0",
      "--raft_bind_address", "0.0.0.0:8008",
      "--raft_advertised_address", "nodesmetadata0:8008",
      "--application_bind_address", ":8080",
      "--application_advertised_address", "nodesmetadata0:8080",
      "--raft_dir", "/tmp",
      "--bootstrap_raft_cluster", "true",
    ]
  nodesmetadata1: # will start as follower
    container_name: nodesmetadata1
    tty: true
    build:
      context: ..
      dockerfile: nodesmetadata/Dockerfile
    networks:
      - nodesmetadata
    ports:
      - "31001:8080"
    command: [
      "/app/nodesmetadata",
      "--raft_id", "raft1",
      "--raft_bind_address", "0.0.0.0:8008",
      "--raft_advertised_address", "nodesmetadata1:8008",
      "--application_bind_address", ":8080",
      "--application_advertised_address", "nodesmetadata1:8080",
      "--raft_dir", "/tmp",
      "--bootstrap_raft_cluster", "false",
    ]
  nodesmetadata2: # will start as follower
    container_name: nodesmetadata2
    tty: true
    build:
      context: ..
      dockerfile: nodesmetadata/Dockerfile
    networks:
      - nodesmetadata
    ports:
      - "31002:8080"
    command: [
      "/app/nodesmetadata",
      "--raft_id", "raft2",
      "--raft_bind_address", "0.0.0.0:8008",
      "--raft_advertised_address", "nodesmetadata2:8008",
      "--application_bind_address", ":8080",
      "--application_advertised_address", "nodesmetadata2:8080",
      "--raft_dir", "/tmp",
      "--bootstrap_raft_cluster", "false",
    ]
  proxy0:
    container_name: proxy0
    tty: true
    build:
      context: ..
      dockerfile: proxy/Dockerfile
    networks:
      - nodesmetadata
      - node
    ports:
      - "32000:8080"
    # wait so nodesmetadata get ready
    command: sh -c "
      sleep 5 &&
      /app/proxy --nodesmetadata_address nodesmetadata1:8080 --key_partition_strategy rendezvous_hashing"
  proxy1:
    container_name: proxy1
    tty: true
    build:
      context: ..
      dockerfile: proxy/Dockerfile
    networks:
      - nodesmetadata
      - node
    ports:
      - "32001:8080"
    # wait so nodesmetadata get ready
    command: sh -c "
      sleep 5 &&
      /app/proxy --nodesmetadata_address nodesmetadata1:8080 --key_partition_strategy rendezvous_hashing"
